Given a complete binary tree, count the number of nodes.

Note:

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Example:

Input: 
    1
   / \
  2   3
 / \  /
4  5 6

Output: 6

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int count = 0;
    public int CountNodes(TreeNode root) {
        if(root == null)
        {
            return 0;
        }
        else
        {
            count += 1;
        }
        TreeNode left = root.left;
        TreeNode right = root.right;
        CountNodes(left);
        CountNodes(right);
        return count;
    }
}

Using method variable:: 
or /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int CountNodes(TreeNode root) {
        int count = 0;
        if(root == null)
        {
            return count;
        }
        else
        {
            count += 1;
        }
        TreeNode left = root.left;
        TreeNode right = root.right;
        //left count
        count += CountNodes(left);
        //right count
        count += CountNodes(right);
        return count;
    }
}
