Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)
Example 2:

Input: [1,2,4,8]
Output: [1,2,4,8]

public class Solution {
    
    public bool find(int a , int b)
    {
        if(a % b == 0 || b % a == 0)
        {
            return true;
        }
        return false;
    }
    
    public IList<int> LargestDivisibleSubset(int[] nums) {
          IList<int> lst = new List<int>();
          Array.Sort(nums);
          for(int i = 0; i<nums.Length; i++)
          {
              IList<int> list = new List<int>();
              list.Add(nums[i]);
              for(int j = 0; j<nums.Length; j++)
              {
                  if(i == j)
                  {
                      continue;
                  }
                  bool notAdd = false;
                  foreach(var t in list)
                  {
                      if(!find(t , nums[j]))
                      {
                         notAdd = true;
                         break;
                      }
                  }  
                  if(!notAdd)
                  {
                      list.Add(nums[j]);
                  }
              }
              if(lst.Count < list.Count)
              {
                  lst = list;
              }
          }
        return lst;
    }
}
