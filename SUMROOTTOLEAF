Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.

Example:

Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:

Input: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    //public int sum = 0;
    public string path ;
    public int SumNumbers(TreeNode root) {
        int sum = 0;
        if (root == null)
                return sum;
        if (root.left == null && root.right == null)
        {
            path += root.val;
            sum = sum + Convert.ToInt32(path);
            path = path.Substring(0, path.Length - 1);
            return sum;
        }
        TreeNode left = root.left;
        TreeNode right = root.right;
        path += root.val;
        int sum1 = SumNumbers(left);
        int sum2 = SumNumbers(right);
        path = path.Substring(0, path.Length - 1);
        return sum1 + sum2;
     }
}
